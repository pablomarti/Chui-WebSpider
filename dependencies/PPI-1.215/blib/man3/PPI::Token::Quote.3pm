.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPI::Token::Quote 3"
.TH PPI::Token::Quote 3 "2011-02-26" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Token::Quote \- String quote abstract base class
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  PPI::Token::Quote
\&  isa PPI::Token
\&      isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`PPI::Token::Quote\*(C'\fR class is never instantiated, and simply
provides a common abstract base class for the four quote classes.
In \s-1PPI\s0, a \*(L"quote\*(R" is limited to only the quote-like things that
themselves directly represent a string. (although this includes
double quotes with interpolated elements inside them).
.PP
The subclasses of \f(CW\*(C`PPI::Token::Quote\*(C'\fR are:
.ie n .IP "\*(Aq\*(Aq \- PPI::Token::Quote::Single" 2
.el .IP "\f(CW\*(Aq\*(Aq\fR \- PPI::Token::Quote::Single" 2
.IX Item " - PPI::Token::Quote::Single"
.PD 0
.ie n .IP """q{}"" \- PPI::Token::Quote::Literal" 2
.el .IP "\f(CWq{}\fR \- PPI::Token::Quote::Literal" 2
.IX Item "q{} - PPI::Token::Quote::Literal"
.ie n .IP """"" \- PPI::Token::Quote::Double" 2
.el .IP "\f(CW``''\fR \- PPI::Token::Quote::Double" 2
.IX Item """"" - PPI::Token::Quote::Double"
.ie n .IP """qq{}"" \- PPI::Token::Quote::Interpolate" 2
.el .IP "\f(CWqq{}\fR \- PPI::Token::Quote::Interpolate" 2
.IX Item "qq{} - PPI::Token::Quote::Interpolate"
.PD
.PP
The names are hopefully obvious enough not to have to explain what
each class is here. See their respective pages for more details.
.PP
Please note that although the here-doc \fBdoes\fR represent a literal
string, it is such a nasty piece of work that in \s-1PPI\s0 it is given the
honor of its own token class (PPI::Token::HereDoc).
.SH "METHODS"
.IX Header "METHODS"
.Sh "string"
.IX Subsection "string"
The \f(CW\*(C`string\*(C'\fR method is provided by all four ::Quote classes. It won't
get you the actual literal Perl value, but it will strip off the wrapping
of the quotes.
.PP
.Vb 5
\&  # The following all return foo from the \->string method
\&  \*(Aqfoo\*(Aq
\&  "foo"
\&  q{foo}
\&  qq <foo>
.Ve
.PP
# Prove what we say in the \->string docs
my \f(CW$Document\fR = PPI::Document\->new(\e<<'\s-1END_PERL\s0');
  'foo'
  \*(L"foo\*(R"
  q{foo}
  qq <foo>
\&\s-1END_PERL\s0
isa_ok( \f(CW$Document\fR, 'PPI::Document' );
.PP
my \f(CW$quotes\fR = \f(CW$Document\fR\->find('Token::Quote');
is( ref($quotes), '\s-1ARRAY\s0', 'Found quotes' );
is( scalar(@$quotes), 4, 'Found 4 quotes' );
foreach my \f(CW$Quote\fR ( @$quotes ) {
	isa_ok( \f(CW$Quote\fR, 'PPI::Token::Quote');
	can_ok( \f(CW$Quote\fR, 'string'           );
	is( \f(CW$Quote\fR\->string, 'foo', '\->string returns \*(L"foo\*(R" for '
		. \f(CW$Quote\fR\->content );
}
.Sh "literal"
.IX Subsection "literal"
The \f(CW\*(C`literal\*(C'\fR method is provided by ::Quote:Literal and
::Quote::Single.  This returns the value of the string as Perl sees
it: without the quote marks and with \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\*(Aq\*(C'\fR resolved to \f(CW\*(C`\e\*(C'\fR
and \f(CW\*(C`\*(Aq\*(C'\fR.
.PP
The \f(CW\*(C`literal\*(C'\fR method is not implemented by ::Quote::Double or
::Quote::Interpolate yet.
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 78:" 4
.IX Item "Around line 78:"
\&'=begin' only takes one parameter, not several as in '=begin testing string 15'
.IP "Around line 99:" 4
.IX Item "Around line 99:"
=end testing without matching =begin.  (Stack: [empty])
