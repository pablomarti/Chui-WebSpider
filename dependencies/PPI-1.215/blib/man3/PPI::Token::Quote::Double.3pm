.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPI::Token::Quote::Double 3"
.TH PPI::Token::Quote::Double 3 "2011-02-26" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Token::Quote::Double \- A standard "double quote" token
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\&  PPI::Token::Quote::Double
\&  isa PPI::Token::Quote
\&      isa PPI::Token
\&          isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`PPI::Token::Quote::Double\*(C'\fR object represents a double-quoted
interpolating string.
.PP
The string is treated as a single entity, \s-1PPI\s0 will not try to
understand what is in the string during the parsing process.
.SH "METHODS"
.IX Header "METHODS"
There are several methods available for \f(CW\*(C`PPI::Token::Quote::Double\*(C'\fR, beyond
those provided by the parent PPI::Token::Quote, PPI::Token and
PPI::Element classes.
.PP
Got any ideas for methods? Submit a report to rt.cpan.org!
.Sh "interpolations"
.IX Subsection "interpolations"
The interpolations method checks to see if the double quote actually
contains any interpolated variables.
.PP
Returns true if the string contains interpolations, or false if not.
.PP
# Get a set of objects
my \f(CW$Document\fR = PPI::Document\->new(\e<<'\s-1END_PERL\s0');
\&\*(L"no interpolations\*(R"
\&\*(L"no \e@interpolations\*(R"
\&\*(L"has \f(CW$interpolation\fR\*(R"
\&\*(L"has \f(CW@interpolation\fR\*(R"
\&\*(L"has \e\e@interpolation\*(R"
"" # False content to test double-negation scoping
\&\s-1END_PERL\s0
isa_ok( \f(CW$Document\fR, 'PPI::Document' );
my \f(CW$strings\fR = \f(CW$Document\fR\->find('Token::Quote::Double');
is( scalar @{$strings}, 6, 'Found the 6 test strings' );
is( \f(CW$strings\fR\->[0]\->interpolations, '', 'String 1: No interpolations'  );
is( \f(CW$strings\fR\->[1]\->interpolations, '', 'String 2: No interpolations'  );
is( \f(CW$strings\fR\->[2]\->interpolations, 1,  'String 3: Has interpolations' );
is( \f(CW$strings\fR\->[3]\->interpolations, 1,  'String 4: Has interpolations' );
is( \f(CW$strings\fR\->[4]\->interpolations, 1,  'String 5: Has interpolations' );
is( \f(CW$strings\fR\->[5]\->interpolations, '', 'String 6: No interpolations'  );
.Sh "simplify"
.IX Subsection "simplify"
For various reasons, some people find themselves compelled to have
their code in the simplest form possible.
.PP
The \f(CW\*(C`simply\*(C'\fR method will turn a simple double-quoted string into the
equivalent single-quoted string.
.PP
If the double can be simplified, it will be modified in place and
returned as a convenience, or returns false if the string cannot be
simplified.
.PP
my \f(CW$Document\fR = PPI::Document\->new(\e<<'\s-1END_PERL\s0');
\&\*(L"no special characters\*(R"
\&\*(L"has \e\*(R"double\e\*(L" quotes\*(R"
\&\*(L"has 'single' quotes\*(R"
\&\*(L"has \f(CW$interpolation\fR\*(R"
\&\*(L"has \f(CW@interpolation\fR\*(R"
"\*(L"
\&\s-1END_PERL\s0
isa_ok( \f(CW$Document\fR, 'PPI::Document' );
my \f(CW$strings\fR = \f(CW$Document\fR\->find('Token::Quote::Double');
is( scalar @{$strings}, 6, 'Found the 6 test strings' );
is( \f(CW$strings\fR\->[0]\->simplify, q<'no special characters'>, 'String 1: No special characters' );
is( \f(CW$strings\fR\->[1]\->simplify, q<\*(R"has \e\*(L"double\e\*(R" quotes\*(L">, 'String 2: Double quotes'         );
is( \f(CW$strings\fR\->[2]\->simplify, q<\*(R"has 'single' quotes\*(L">,   'String 3: Single quotes'         );
is( \f(CW$strings\fR\->[3]\->simplify, q<\*(R"has \f(CW$interpolation\fR\*(L">,    'String 3: Has interpolation'     );
is( \f(CW$strings\fR\->[4]\->simplify, q<\*(R"has \f(CW@interpolation\fR">,    'String 4: Has interpolation'     );
is( \f(CW$strings\fR\->[5]\->simplify, q<''>,                      'String 6: Empty string'          );
.PP
my \f(CW$Document\fR = PPI::Document\->new( \e'print \*(L"foo\*(R";' );
isa_ok( \f(CW$Document\fR, 'PPI::Document' );
my \f(CW$Double\fR = \f(CW$Document\fR\->find_first('Token::Quote::Double');
isa_ok( \f(CW$Double\fR, 'PPI::Token::Quote::Double' );
is( \f(CW$Double\fR\->string, 'foo', '\->string returns as expected' );
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 64:" 4
.IX Item "Around line 64:"
\&'=begin' only takes one parameter, not several as in '=begin testing interpolations 8'
.IP "Around line 85:" 4
.IX Item "Around line 85:"
=end testing without matching =begin.  (Stack: [empty])
.IP "Around line 110:" 4
.IX Item "Around line 110:"
\&'=begin' only takes one parameter, not several as in '=begin testing simplify 8'
.IP "Around line 130:" 4
.IX Item "Around line 130:"
=end testing without matching =begin.  (Stack: [empty])
.IP "Around line 159:" 4
.IX Item "Around line 159:"
\&'=begin' only takes one parameter, not several as in '=begin testing string 3'
.IP "Around line 167:" 4
.IX Item "Around line 167:"
=end testing without matching =begin.  (Stack: [empty])
