.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPI::Token::_QuoteEngine::Full 3"
.TH PPI::Token::_QuoteEngine::Full 3 "2011-02-26" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
# Verify that Token::Quote, Token::QuoteLike and Token::Regexp
# do not have \->new functions
my \f(CW$RE_SYMBOL\fR  = qr/\eA(?!\ed)\ew+\ez/;
foreach my \f(CW$name\fR ( qw{Token::Quote Token::QuoteLike Token::Regexp} ) {
	no strict 'refs';
	my \f(CW@functions\fR = sort
		grep { defined &{\*(L"${name}::$_\*(R"} }
		grep { /$RE_SYMBOL/o }
		keys %{\*(L"PPI::${name}::\*(R"};
	is( scalar(grep { \f(CW$_\fR eq 'new' } \f(CW@functions\fR), 0,
		\*(L"$name does not have a new function\*(R" );
}
.PP
# This primarily to ensure that \fIqw()\fR with non-balanced types
# are treated the same as those with balanced types.
\&\s-1SCOPE:\s0 {
	my \f(CW@seps\fR   = ( undef, undef, '/', '#', ','  );
	my \f(CW@types\fR  = ( '()', '<>', '//', '##', ',,' );
	my \f(CW@braced\fR = ( qw{ 1 1 0 0 0 } );
	my \f(CW$i\fR      = 0;
	for my \f(CW$q\fR ('\fIqw()\fR', 'qw<>', 'qw//', 'qw##', 'qw,,') {
		my \f(CW$d\fR = PPI::Document\->new(\e$q);
		my \f(CW$o\fR = \f(CW$d\fR\->{children}\->[0]\->{children}\->[0];
		my \f(CW$s\fR = \f(CW$o\fR\->{sections}\->[0];
		is( \f(CW$o\fR\->{operator},  'qw',      \*(L"$q correct operator\*(R"  );
		is( \f(CW$o\fR\->{_sections}, 1,         \*(L"$q correct _sections\*(R" );
		is( \f(CW$o\fR\->{braced}, \f(CW$braced\fR[$i],  \*(L"$q correct braced\*(R"    );
		is( \f(CW$o\fR\->{separator}, \f(CW$seps\fR[$i], \*(L"$q correct seperator\*(R" );
		is( \f(CW$o\fR\->{content},   \f(CW$q\fR,        \*(L"$q correct content\*(R"   );
		is( \f(CW$s\fR\->{position},  3,         \*(L"$q correct position\*(R"  );
		is( \f(CW$s\fR\->{type}, \f(CW$types\fR[$i],     \*(L"$q correct type\*(R"      );
		is( \f(CW$s\fR\->{size},      0,         \*(L"$q correct size\*(R"      );
		\f(CW$i\fR++;
	}
}
.PP
\&\s-1SCOPE:\s0 {
	my \f(CW@stuff\fR  = ( qw\-( ) < > / / \-, '#', '#', ',',',' );
	my \f(CW@seps\fR   = ( undef, undef, '/', '#', ','  );
	my \f(CW@types\fR  = ( '()', '<>', '//', '##', ',,' );
	my \f(CW@braced\fR = ( qw{ 1 1 0 0 0 } );
	my \f(CW@secs\fR   = ( qw{ 1 1 0 0 0 } );
	my \f(CW$i\fR      = 0;
	while ( \f(CW@stuff\fR ) {
		my \f(CW$opener\fR = shift \f(CW@stuff\fR;
		my \f(CW$closer\fR = shift \f(CW@stuff\fR;
		my \f(CW$d\fR = PPI::Document\->new(\e\*(L"qw$opener\*(R");
		my \f(CW$o\fR = \f(CW$d\fR\->{children}\->[0]\->{children}\->[0];
		my \f(CW$s\fR = \f(CW$o\fR\->{sections}\->[0];
		is( \f(CW$o\fR\->{operator},  'qw',        \*(L"qw$opener correct operator\*(R"  );
		is( \f(CW$o\fR\->{_sections}, \f(CW$secs\fR[$i],   \*(L"qw$opener correct _sections\*(R" );
		is( \f(CW$o\fR\->{braced}, \f(CW$braced\fR[$i],    \*(L"qw$opener correct braced\*(R"    );
		is( \f(CW$o\fR\->{separator}, \f(CW$seps\fR[$i],   \*(L"qw$opener correct seperator\*(R" );
		is( \f(CW$o\fR\->{content},   \*(L"qw$opener\*(R", \*(L"qw$opener correct content\*(R"   );
		if ( \f(CW$secs\fR[$i] ) {
			is( \f(CW$s\fR\->{type}, \*(L"$opener$closer\*(R", \*(L"qw$opener correct type\*(R"      );
		}
		\f(CW$i\fR++;
	}
}
.PP
\&\s-1SCOPE:\s0 {
	foreach (
		[ '/foo/i',       'foo', undef, { i => 1 }, [ '//' ] ],
		[ 'm<foo>x',      'foo', undef, { x => 1 }, [ '<>' ] ],
		[ 's{foo}[bar]g', 'foo', 'bar', { g => 1 }, [ '{}', '[]' ] ],
		[ 'tr/fo/ba/',    'fo',  'ba',  {},         [ '//', '//' ] ],
		[ 'qr{foo}smx',   'foo', undef, { s => 1, m => 1, x => 1 },
							    [ '{}' ] ],
	) {
		my ( \f(CW$code\fR, \f(CW$match\fR, \f(CW$subst\fR, \f(CW$mods\fR, \f(CW$delims\fR ) = @{ \f(CW$_\fR };
		my \f(CW$doc\fR = PPI::Document\->new( \e$code );
		\f(CW$doc\fR or warn \*(L"'$code' did not create a document\*(R";
		my \f(CW$obj\fR = \f(CW$doc\fR\->child( 0 )\->child( 0 );
		is( \f(CW$obj\fR\->_section_content( 0 ), \f(CW$match\fR, \*(L"$code correct match\*(R" );
		is( \f(CW$obj\fR\->_section_content( 1 ), \f(CW$subst\fR, \*(L"$code correct subst\*(R" );
		is_deeply( { \f(CW$obj\fR\->\fI_modifiers()\fR }, \f(CW$mods\fR, \*(L"$code correct modifiers\*(R" );
		is_deeply( [ \f(CW$obj\fR\->\fI_delimiters()\fR ], \f(CW$delims\fR, \*(L"$code correct delimiters\*(R" );
	}
}
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 52:" 4
.IX Item "Around line 52:"
\&'=begin' only takes one parameter, not several as in '=begin testing new 90'
.IP "Around line 135:" 4
.IX Item "Around line 135:"
=end testing without matching =begin.  (Stack: [empty])
