.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Thread::Queue::Duplex 3"
.TH Thread::Queue::Duplex 3 "2012-02-24" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Thread::Queue::Duplex \- thread\-safe request/response queue with identifiable elements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use Thread::Queue::Duplex;
\&        #
\&        #       create new queue, and require that there be
\&        #       registered listeners for an enqueue operation
\&        #       to succeed, and limit the max pending requests
\&        #       to 20
\&        #
\&        my $q = Thread::Queue::Duplex\->new(ListenerRequired => 1, MaxPending => 20);
\&        #
\&        #       register as a listener
\&        #
\&        $q\->listen();
\&        #
\&        #       unregister as a listener
\&        #
\&        $q\->ignore();
\&        #
\&        #       wait for a listener to register
\&        #
\&        $q\->wait_for_listener($timeout);
\&        #
\&        #       change the max pending limit
\&        #
\&        $q\->set_max_pending($limit);
\&        #
\&        #       enqueue elements, returning a unique queue ID
\&        #       (used in the client)
\&        #
\&        my $id = $q\->enqueue("foo", "bar");
\&        #
\&        #       enqueue elements, and wait for a response
\&        #       (used in the client)
\&        #
\&        my $resp = $q\->enqueue_and_wait("foo", "bar");
\&        #
\&        #       enqueue elements, and wait for a response
\&        #       until $timeout secs (used in the client)
\&        #
\&        my $resp = $q\->enqueue_and_wait_until($timeout, "foo", "bar");
\&        #
\&        #       enqueue elements at head of queue, returning a
\&        #       unique queue ID (used in the client)
\&        #
\&        my $id = $q\->enqueue_urgent("foo", "bar");
\&        #
\&        #       enqueue elements at head of queue and wait for response
\&        #
\&        my $resp = $q\->enqueue_urgent_and_wait("foo", "bar");
\&        #
\&        #       enqueue elements at head of queue and wait for
\&        #       response until $timeout secs
\&        #
\&        my $resp = $q\->enqueue_urgent_and_wait_until($timeout, "foo", "bar");
\&        #
\&        #       enqueue elements for simplex operation (no response)
\&        #       returning the queue object
\&        #
\&        $q\->enqueue_simplex("foo", "bar");
\&
\&        $q\->enqueue_simplex_urgent("foo", "bar");
\&        #
\&        #       dequeue next available element (used in the server),
\&        #       waiting indefinitely for an element to be made available
\&        #       returns shared arrayref, first element is unique ID,
\&        #       which may be undef for simplex requests
\&        #
\&        my $foo = $q\->dequeue;
\&        #
\&        #       dequeue next available element (used in the server),
\&        #       returns undef if no element immediately available
\&        #       otherwise, returns shared arrayref, first element is unique ID,
\&        #       which may be undef for simplex requests
\&        #
\&        my $foo = $q\->dequeue_nb;
\&        #
\&        #       dequeue next available element (used in the server),
\&        #       returned undef if no element available within $timeout
\&        #       seconds; otherwise, returns shared arrayref, first
\&        #       element is unique ID, which may be undef for simplex requests
\&        #
\&        my $foo = $q\->dequeue_until($timeout);
\&        #
\&        #       dequeue next available element (used in the server),
\&        #       but only if marked urgent; otherwise, returns undef
\&        #
\&        my $foo = $q\->dequeue_urgent();
\&        #
\&        #       returns number of items still in queue
\&        #
\&        my $left = $q\->pending;
\&        #
\&        #       maps a response for the
\&        #       queued element identified by $id;
\&        #
\&        $q\->respond($id, @list);
\&        #
\&        #       tests for a response to the queued
\&        #       element identified by $id; returns undef if
\&        #       not yet available, else returns the queue object
\&        #
\&        my $result = $q\->ready($id);
\&        #
\&        #       returns list of available response ID\*(Aqs;
\&        #       if list provided, only returns ID\*(Aqs from the list.
\&        #       Returns undef if none available.
\&        #       In scalar context, returns only first available;
\&        #       Else a list of available IDs
\&        #
\&        my @ids = $q\->available();
\&        #
\&        #       wait for and return the response for the
\&        #       specified unique identifier
\&        #       (dequeue_response is alias)
\&        #
\&        my $result = $q\->wait($id);
\&        my $result = $q\->dequeue_response($id);
\&        #
\&        #       waits up to $timeout seconds for a response to
\&        #       the queued element identified by $id; returns undef if
\&        #       not available within $timeout, else returns the queue object
\&        #
\&        my $result = $q\->wait_until($id, $timeout);
\&        #
\&        #       wait for a response to the queued
\&        #       elements listed in @ids, returning a hashref of
\&        #       the first available response(s), keyed by id
\&        #
\&        my $result = $q\->wait_any(@ids);
\&        #
\&        #       wait upto $timeout seconds for a response to
\&        #       the queued elements listed in @ids, returning
\&        #       a hashref of the first available response(s), keyed by id
\&        #       Returns undef if none available in $timeout seconds
\&        #
\&        my $result = $q\->wait_any_until($timeout, @ids);
\&        #
\&        #       wait for responses to all the queued
\&        #       elements listed in @ids, returning a hashref of
\&        #       the response(s), keyed by id
\&        #
\&        my $result = $q\->wait_all(@ids);
\&        #
\&        #       wait upto $timeout seconds for responses to
\&        #       all the queued elements listed in @ids, returning
\&        #       a hashref of the response(s), keyed by id
\&        #       Returns undef if all responses not recv\*(Aqd
\&        #       in $timeout seconds
\&        #
\&        my $result = $q\->wait_all_until($timeout, @ids);
\&        #
\&        #       mark an existing request
\&        #
\&        $q\->mark($id, \*(AqCANCEL\*(Aq);
\&        #
\&        #       test if a request is marked
\&        #
\&        print "Marked for cancel!"
\&                if $q\->marked($id, \*(AqCANCEL\*(Aq);
\&        #
\&        #       cancel specific operations
\&        #
\&        my $result = $q\->cancel(@ids);
\&        #
\&        #       cancel all operations
\&        #
\&        my $result = $q\->cancel_all();
\&        #
\&        #       test if specified request has been cancelled
\&        #
\&        my $result = $q\->cancelled($id);
\&        #
\&        #       (class\-level method) wait for an event on
\&        #       any of the listed queue objects. Returns a
\&        #       list of queues which have events pending
\&        #
\&        my $result = Thread::Queue::Duplex\->wait_any(
\&                [ $q1 ], [ $q2, @ids ]);
\&        #
\&        #       (class\-level method) wait upto $timeout seconds
\&        #       for an event on any of the listed queue objects.
\&        #       Returns undef if none available in $timeout seconds,
\&        #       otherwise, returns a list of queues with events pending
\&        #
\&        my $result = Thread::Queue::Duplex\->wait_any_until(
\&                $timeout, [ $q1 ], [ $q2, @ids ]);
\&        #
\&        #       (class\-level method) wait for events on all the listed
\&        #       queue objects. Returns the list of queue objects.
\&        #
\&        my $result = Thread::Queue::Duplex\->wait_all(
\&                [ $q1 ], [ $q2, @ids ]);
\&        #
\&        #       (class\-level method) wait upto $timeout seconds for
\&        #       events on all the listed queue objects.
\&        #       Returns empty list if all listed queues do not have
\&        #       an event in $timeout seconds, otherwise returns
\&        #       the list of queues
\&        #
\&        my $result = Thread::Queue::Duplex\->wait_all_until(
\&                $timeout, [ $q1 ], [ $q2, @ids ]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A mapped queue, similar to Thread::Queue, except that as elements
are queued, they are assigned unique identifiers, which are used
to identify responses returned from the dequeueing thread. This
class provides a simple RPC-like mechanism between multiple client
and server threads, so that a single server thread can safely
multiplex requests from multiple client threads. \fBNote\fR that
simplex versions of the enqueue methods are provided which
do not assign unique identifiers, and are used for requests
to which no response is required/expected.
.PP
In addition, elements are inspected as they are enqueued/dequeued to determine
if they are Thread::Queue::Queueable (\fIaka \s-1TQQ\s0\fR) objects, and, if so,
the \fIonEnqueue()\fR or \fIonDequeue()\fR methods are called to permit any
additional class-specific marshalling/unmarshalling to be performed.
Thread::Queue::Duplex (\fIaka \s-1TQD\s0\fR) is itself a
Thread::Queue::Queueable object, thus permitting \s-1TQD\s0
objects to be passed between threads.
.PP
\&\fB\s-1NOTE:\s0\fR Thread::Queue::Duplex does
\&\fBnot\fR perform any default marshalling of complex structures; it is the
responsibility of the application to either
.IP "\(bu" 4
use threads::shared objects for all queued structures
.IP "\(bu" 4
implement its own application specific marshalling via, e.g.,
Storable
.IP "\(bu" 4
implement a Thread::Queue::Queueable wrapper class for
the structure
.PP
Various \f(CW\*(C`wait()\*(C'\fR methods are provided to permit waiting on individual
responses, any or all of a list of responses, and time-limited waits
for each. Additionally, class-level versions of the \f(CW\*(C`wait()\*(C'\fR methods
are provided to permit a thread to simultaneously wait for either
enqueue or response events on any of a number of queues, or
on objects implementing Thread::Queue::TQDContainer.
.PP
A \f(CW\*(C`mark()\*(C'\fR method is provided to permit out-of-band information
to be applied to pending requests. A responder may test for marks
via the \f(CW\*(C`marked()\*(C'\fR method prior to \f(CW\*(C`respond()\*(C'\fRing to a request.
An application may specify a mark value, which the responder can
test for; if no explicit mark value is given, the value 1 is used.
.PP
\&\f(CW\*(C`cancel()\*(C'\fR and \f(CW\*(C`cancel_all()\*(C'\fR methods are provided to
explicitly cancel one or more requests, and invoke the
\&\f(CW\*(C`onCancel()\*(C'\fR method of any Thread::Queue::Queueable objects
in the request. Cancelling will result in one of
.IP "\(bu" 4
marking the request as cancelled if
it has not yet been dequeued (note that it cannot be
spliced from the queue due \f(CW\*(C`threads::shared\*(C'\fR's lack
of support for array splicing)
.IP "\(bu" 4
removal and discarding of the response from the response map
if the request has already been processed
.IP "\(bu" 4
if the request is in progress, the responder will
detect the cancellation when it attempts to \f(CW\*(C`respond()\*(C'\fR,
and the response will be discarded
.PP
\&\f(CW\*(C`listen()\*(C'\fR and \f(CW\*(C`ignore()\*(C'\fR methods are provided so that
server-side threads can register/unregister as listeners
on the queue; the constructor accepts a \*(L"ListenerRequired\*(R"
attribute argument. If set, then any \f(CW\*(C`enqueue()\*(C'\fR
operation will fail and return undef if there are no
registered listeners. This feature provides some safeguard
against \*(L"stuck\*(R" requestor threads when the responder(s)
have shutdown for some reason. In addition, a \f(CW\*(C`wait_for_listener()\*(C'\fR
method is provided to permit an initiating thread to wait
until another thread registers as a listener.
.PP
The constructor also accepts a \f(CW\*(C`MaxPending\*(C'\fR attribute
that specifies the maximum number of requests that may
be pending in the queue before the operation will block.
Note that responses are not counted in this limit.
.PP
\&\f(CW\*(C`Thread::Queue::Duplex\*(C'\fR objects encapsulate
.IP "\(bu" 4
a shared array, used as the queue (same as Thread::Queue)
.IP "\(bu" 4
a shared scalar, used to provide unique identifier sequence
numbers
.IP "\(bu" 4
a shared hash, \fIaka\fR the mapping hash, used to return responses
to enqueued elements, using the generated uniqiue identifier as the hash key
.IP "\(bu" 4
a listener count, incremented each time \f(CW\*(C`listen()\*(C'\fR is called,
decremented each time \f(CW\*(C`ignore()\*(C'\fR is called, and, if
the \*(L"listener required\*(R" flag has been set on construction, tested
for each \f(CW\*(C`enqueue()\*(C'\fR call.
.PP
A normal processing sequence for Thread::Queue::Duplex might be:
.PP
.Vb 10
\&        #
\&        #       Thread A (the client):
\&        #
\&                ...marshal parameters for a coroutine...
\&                my $id = $q\->enqueue(\*(Aqfunction_name\*(Aq, \e@paramlist);
\&                my $results = $q\->dequeue_response($id);
\&                ...process $results...
\&        #
\&        #       Thread B (the server):
\&        #
\&                while (1) {
\&                        my $call = $q\->dequeue;
\&                        my ($id, $func, @params) = @$call;
\&                        $q\->respond($id, $self\->$func(@params));
\&                }
.Ve
.SH "METHODS"
.IX Header "METHODS"
Refer to the classdocs for summary and detailed method descriptions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Thread::Queue::Queueable, Thread::Queue::TQDContainer,
threads, threads::shared, Thread::Queue,
Thread::Queue::Multiplex, Thread::Apartment
.SH "AUTHOR, COPYRIGHT, & LICENSE"
.IX Header "AUTHOR, COPYRIGHT, & LICENSE"
Dean Arnold, Presicient Corp. darnold@presicient.com
.PP
Copyright(C) 2005,2006, Presicient Corp., \s-1USA\s0
.PP
Licensed under the Academic Free License version 2.1, as specified in the
License.txt file included in this software package, or at OpenSource.org
<http://www.opensource.org/licenses/afl\-2.1.php>.
